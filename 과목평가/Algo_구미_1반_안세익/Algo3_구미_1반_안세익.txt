# 삽입(push) : 마지막 노드(heapcount)를 1증가 시키고 그 자리에 데이터를 저장한 후 부모노드와 비교해 부모노드보다 값이 클때까지 계속 교환한다.
# 삭제(pop) : 루트에 있는 값을 삭제(pop)하고 마지막 노드(heapcount)에 있던 값을 루트로 가져오고 부모노드가 자식노드보다 값이 작아질 때까지 계속 교환한다.(자식 노드 중 더 작은 값과 교환한다.)

초기상태 : -,-,-,-,-,-,-,-
2삽입 : -,2,-,-,-,-,-,-
3삽입 : -,2,3,-,-,-,-,-
4삽입 : -,2,3,4,-,-,-,-
5삽입 : -,2,3,4,5,-,-,-
1삽입 : -,2,3,4,5,1,-,-
    1이 삽입된 5번 노드의 부모 노드는 2번 노드이고 부모노드의 값이 3으로 자식노드보다 부모노드의 값이 더 크므로 교환한다.
    수정 : -,2,1,4,5,3,-,-
    1이 삽입된 2번 노드의 부모 노드는 1번 노드이고 부모노드의 값이 2으로 자식노드보다 부모노드의 값이 더 크므로 교환한다.
    수정 : -,1,2,4,5,3,-,-
9삽입 : -,1,2,4,5,3,9,-
8삽입 : -,1,2,4,5,3,9,8
삭제 : -,-,2,4,5,3,9,8(삭제된 값 1) 루트에 있는 값이 삭제된다.
    마지막 노드에 있던 값이 루트로 이동
    수정 : -,8,2,4,5,3,9,-
    자식 노드와 비교하여 부모노드의 값이 크면 교환(자식 중 더 작은 값이랑 교환)
    수정 : -,2,8,4,5,3,9,-
    수정 : -,2,3,4,5,8,9,-
7삽입 : -,2,3,4,5,8,9,7
삭제 : -,-,3,4,5,8,9,7(삭제된 값 2) 루트에 있는 값이 삭제된다.
    마지막 노드에 있던 값이 루트로 이동
    수정 : -,7,3,4,5,8,9,-
    자식 노드와 비교하여 부모노드의 값이 크면 교환(자식 중 더 작은 값이랑 교환)
    수정 : -,3,7,4,5,8,9,-
    수정 : -,3,5,4,7,8,9,-
1삽입 : -,3,5,4,7,8,9,1
    1이 삽입된 7번 노드의 부모 노드는 3번 노드이고 부모노드의 값이 4으로 자식노드보다 부모노드의 값이 더 크므로 교환한다.
    -,3,5,1,7,8,9,4
    1이 삽입된 3번 노드의 부모 노드는 1번 노드이고 부모노드의 값이 3으로 자식노드보다 부모노드의 값이 더 크므로 교환한다.
    -,1,5,3,7,8,9,4




